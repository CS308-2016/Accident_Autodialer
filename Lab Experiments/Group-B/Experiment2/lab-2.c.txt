/*
▪ *
▪ * Team Id: Team 7B
▪ * Author List: Sanket Kanjalkar(120050011), 
				 Karan Ganju(120050021)
▪ * Filename: lab2.c
▪ * Functions: setup(),ledPinConfig(),switchPinConfig().detectKeyPress(),interuptConfig(),
				Clockconfig(),Timer0IntHandler()
▪ * Global Variables: sw2status,sw1status,count,ui8led>
*/
#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>
#include "inc/hw_types.h"
#include "inc/hw_memmap.h"
#include "driverlib/sysctl.h"
#include "driverlib/gpio.h"
#include <stdint.h>
#include "inc/tm4c123gh6pm.h"
#include "driverlib/interrupt.h"
#include "driverlib/timer.h"

// LOCK_F and CR_F - used for unlocking PORTF pin 0
#define LOCK_F (*((volatile unsigned long *)0x40025520))
#define CR_F   (*((volatile unsigned long *)0x40025524))

/*
 ------ Global Variable Declaration
 */
int sw1Status = 0;
int sw2Status = 0;
uint8_t ui8LED = 2;
int count = 0;
/*

 * Function Name: setup()

 * Input: none

 * Output: none

 * Description: Set crystal frequency and enable GPIO Peripherals

 * Example Call: setup();

 */
void setup(void)
{
	SysCtlClockSet(SYSCTL_SYSDIV_4|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
}

/*

 * Function Name: ledPinConfig()

 * Input: none

 * Output: none

 * Description: Set PORTF Pin 1, Pin 2, Pin 3 as output.

 * Example Call: ledPinConfig();

 */

void ledPinConfig(void)
{
	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3);  // Pin-1 of PORT F set as output. Modifiy this to use other 2 LEDs.
}

/*

 * Function Name: switchPinConfig()

 * Input: none

 * Output: none

 * Description: Set PORTF Pin 0 and Pin 4 as input. Note that Pin 0 is locked.

 * Example Call: switchPinConfig();

 */
void switchPinConfig(void)
{
	// Following two line removes the lock from SW2 interfaced on PORTF Pin0 -- leave this unchanged
	LOCK_F=0x4C4F434BU;
	CR_F=GPIO_PIN_0|GPIO_PIN_4;

	// GPIO PORTF Pin 0 and Pin4
	GPIODirModeSet(GPIO_PORTF_BASE,GPIO_PIN_4 | GPIO_PIN_0,GPIO_DIR_MODE_IN); // Set Pin-4 of PORT F as Input. Modifiy this to use another switch
	GPIOPinTypeGPIOInput(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_4);
	GPIOPadConfigSet(GPIO_PORTF_BASE,GPIO_PIN_4 |GPIO_PIN_0 ,GPIO_STRENGTH_12MA,GPIO_PIN_TYPE_STD_WPU);
}

/*

 * Function Name: switchPinConfig()

 * Input: none

 * Output: none

 * Description: Set PORTF Pin 0 and Pin 4 as input. Note that Pin 0 is locked.

 * Example Call: switchPinConfig();

 */


void clockConfig(void)
{
	SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);
	TimerConfigure(TIMER0_BASE,TIMER_CFG_PERIODIC);
	uint32_t ui32Period = (SysCtlClockGet() / 100);
	TimerLoadSet(TIMER0_BASE, TIMER_A, ui32Period -	1);
}

/*

 * Function Name: interruptConfig()

 * Input: none

 * Output: none

 * Description: Configure interupts

 * Example Call: interruptConfig();

 */


void interruptConfig(void)
{
	IntEnable(INT_TIMER0A);
	TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);
	IntMasterEnable();
	TimerEnable(TIMER0_BASE,TIMER_A);
}

/*

 * Function Name: detectKeyPress()

 * Input: state machine state

 * Output: none

 * Description: Changes the color of LED upon key press event

 * Example Call: detectKeyPress();

 */


void detectKeyPress(int i)
{
	if(i == 0){
		ui8LED = ui8LED * 2;
		if(ui8LED == 16) ui8LED = 2;
		GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, ui8LED);
	}
	else if(i == 1){
		count++;
	}
	return;
}

/*

 * Function Name: switchPinConfig()

 * Input: none

 * Output: none

 * Description: Interupt handler for timer 0

 * Example Call: Timer0IntHandler();

 */


void Timer0IntHandler(void)
{
	TimerIntClear(TIMER0_BASE,TIMER_TIMA_TIMEOUT);
	// Do stuff here!

	//Only 1 mide of swtichis active at a time. 
	// The code as pers tate machine is given in case statements of seitch
	//This is auto mode of the code
	switch (sw1Status) {
	case 0:
		sw1Status = (GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_4)) ? 0 : 1;
		break;
	case 1:
		if(GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_4)) sw1Status = 0;
		else {
			//Switch LEDS here!
			detectKeyPress(0);
			sw1Status = 2;
		}
		break;
	case 2:
		sw1Status = (GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_4)) ? 0 : 2;
		break;
	default:
		break;
	}

	//This is manual mode of the code. State is changed only upon pressing event of switches
	switch (sw2Status) {
		//normal case
	case 0:
		sw2Status = (GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_0)) ? 0 : 1;
		break;
	case 1:
		if(GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_0)) sw2Status = 0;
		else {
			detectKeyPress(1);
			sw2Status = 2;
		}
		break;
	case 2:
		sw2Status = (GPIOPinRead(GPIO_PORTF_BASE,GPIO_PIN_0)) ? 0 : 2;
		break;
	default:
		break;
	}
}

int main(void)
{
	setup();
	ledPinConfig();
	switchPinConfig();
	clockConfig();
	interruptConfig();
	/*---------------------*/
	//nothing in main
	//only interupt needed
	while(1)
	{
	}

}

